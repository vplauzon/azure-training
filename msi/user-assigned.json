{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
    },
    "variables": {
        "Unique ID": "[uniqueString(concat(resourceGroup().id, 'msi'))]",
        "User Identity": "[concat('user-identity-', variables('Unique ID'))]",
        "Storage Name": "[concat('storage', variables('Unique ID'))]",
        "Container 1": "container1",
        "Container 2": "container2",
        "Container 3": "container3",
        "Container 4": "container4",
        "App Plan": "app-plan",
        "Function App": "[concat('function-app-', variables('Unique ID'))]",
        "List Container App": "[concat('list-containers-', variables('Unique ID'))]",
        "Storage Reader": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1"
    },
    "resources": [
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2018-11-30",
            "name": "[variables('User Identity')]",
            "location": "[resourceGroup().location]"
        },
        {
            "apiVersion": "2019-06-01",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('Storage Name')]",
            "location": "[resourceGroup().location]",
            "kind": "StorageV2",
            "sku": {
                "name": "Standard_LRS"
            },
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "isHnsEnabled": true
            },
            "resources": [
                {
                    "apiVersion": "2019-04-01",
                    "type": "blobServices/containers",
                    "name": "[concat('default/', variables('Container 1'))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('Storage Name'))]"
                    ],
                    "properties": {
                        "publicAccess": "None"
                    }
                },
                {
                    "apiVersion": "2019-04-01",
                    "type": "blobServices/containers",
                    "name": "[concat('default/', variables('Container 2'))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('Storage Name'))]"
                    ],
                    "properties": {
                        "publicAccess": "None"
                    }
                },
                {
                    "apiVersion": "2019-04-01",
                    "type": "blobServices/containers",
                    "name": "[concat('default/', variables('Container 3'))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('Storage Name'))]"
                    ],
                    "properties": {
                        "publicAccess": "None"
                    }
                },
                {
                    "apiVersion": "2019-04-01",
                    "type": "blobServices/containers",
                    "name": "[concat('default/', variables('Container 4'))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('Storage Name'))]"
                    ],
                    "properties": {
                        "publicAccess": "None"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2019-08-01",
            "name": "[variables('App Plan')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic"
            },
            "properties": {
                "name": "[variables('App Plan')]",
                "computeMode": "Dynamic"
            },
            "kind": "linux"
        },
        {
            "apiVersion": "2019-08-01",
            "type": "Microsoft.Web/sites",
            "name": "[variables('Function App')]",
            "location": "[resourceGroup().location]",
            "kind": "functionapp",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('App Plan'))]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('User Identity'))]": {}
                }
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('App Plan'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AzureWebJobsSecretStorageType",
                            "value": "Files"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('Storage Name'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('Storage Name')),'2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('Storage Name'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('Storage Name')),'2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(variables('Function App'))]"
                        },
                        {
                            "name": "ACCOUNT_NAME",
                            "value": "[variables('Storage Name')]"
                        },
                        {
                            "name": "PRINCIPAL_ID",
                            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('User Identity')), '2018-11-30').principalId]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "type": "functions",
                    "apiVersion": "2019-08-01",
                    "name": "container-list",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('Function App'))]"
                    ],
                    "properties": {
                        "config": {
                            "bindings": [
                                {
                                    "authLevel": "function",
                                    "name": "request",
                                    "type": "httpTrigger",
                                    "direction": "in",
                                    "methods": [
                                        "get",
                                        "post"
                                    ]
                                },
                                {
                                    "name": "res",
                                    "type": "http",
                                    "direction": "out"
                                }
                            ]
                        },
                        "files": {
                            "run.csx": "#r \"System.Text.Json\"\n\nusing System;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Primitives;\n\n//  Using https://codebeautify.org/csharp-escape-unescape/ to compress\n//  into a one-liner for ARM Template\n//  Post process:  need to replace \\' by ' as it fails in ARM Templates\npublic static async Task<string[]> Run(\n    HttpRequest request,\n    ILogger log)\n{\n    log.LogInformation(\"Container list starting\");\n\n    var principalId = GetEnvironmentVariable(\"PRINCIPAL_ID\");\n    var identityEndpoint = GetEnvironmentVariable(\"IDENTITY_ENDPOINT\");\n    var identityHeader = GetEnvironmentVariable(\"IDENTITY_HEADER\");\n    var accountName = GetEnvironmentVariable(\"ACCOUNT_NAME\");\n\n    log.LogInformation($\"IDENTITY_ENDPOINT:  {identityEndpoint}\");\n    log.LogInformation($\"IDENTITY_HEADER:  {identityHeader}\");\n\n    var token = await FetchTokenAsync(identityEndpoint, identityHeader, principalId);\n\n    log.LogInformation($\"Token:  {token}\");\n\n    var list = await FetchContainerListAsync(token, accountName);\n\n    log.LogInformation($\"Container list:  {string.Join(\", \", list)}\");\n\n    return list;\n}\n\nprivate async static Task<string> FetchTokenAsync(\n    string identityEndpoint,\n    string identityHeader,\n    string principalId)\n{\n    var client = new HttpClient();\n\n    client.DefaultRequestHeaders.Add(\"X-IDENTITY-HEADER\", identityHeader);\n\n    //  Send HTTP-GET request for a token\n    var response = await client.GetAsync(\n        $\"{identityEndpoint}?resource=https://storage.azure.com&principal_id={principalId}&api-version=2019-08-01\");\n\n    if (response.StatusCode == HttpStatusCode.OK)\n    {\n        var outputText = await response.Content.ReadAsStringAsync();\n        var payload = JsonSerializer.Deserialize<IDictionary<string, object>>(outputText);\n        var token = payload[\"access_token\"].ToString();\n\n        return token;\n    }\n    else\n    {\n        var outputText = await response.Content.ReadAsStringAsync();\n\n        throw new InvalidOperationException($\"Couldn't get the token:  {outputText}\");\n    }\n}\n\nprivate async static Task<string[]> FetchContainerListAsync(string token, string accountName)\n{\n    var client = new HttpClient();\n\n    client.DefaultRequestHeaders.Add(\"x-ms-version\", \"2019-07-07\");\n    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"bearer\", token);\n\n    //  Send HTTP-GET request for a token\n    var response = await client.GetAsync(\n        $\"https://{accountName}.dfs.core.windows.net/?resource=account\");\n\n    if (response.StatusCode == HttpStatusCode.OK)\n    {\n        var outputText = await response.Content.ReadAsStringAsync();\n        var payload = JsonSerializer.Deserialize<IDictionary<string, IDictionary<string, object>[]>>(outputText);\n        var filesystems = payload[\"filesystems\"];\n        var names = filesystems\n            .Select(f=>f[\"name\"].ToString())\n            .ToArray();\n\n        return names;\n    }\n    else\n    {\n        var outputText = await response.Content.ReadAsStringAsync();\n\n        throw new InvalidOperationException($\"Couldn't get the containers:  {outputText}\");\n    }\n}\n\nprivate static string GetEnvironmentVariable(string variableName)\n{\n    var variable = Environment.GetEnvironmentVariable(variableName);\n\n    if (string.IsNullOrWhiteSpace(variable))\n    {\n        throw new ArgumentNullException(variableName, \"Can't find in app settings\");\n    }\n    \n    return variable;\n}"
                        },
                        "isDisabled": false
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('List Container App')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('User Identity'))]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('User Identity'))]": {}
                }
            },
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "account": {
                            "defaultValue": "[variables('Storage Name')]",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                }
                            }
                        }
                    },
                    "actions": {
                        "container-list": {
                            "runAfter": {
                            },
                            "type": "Http",
                            "inputs": {
                                "authentication": {
                                    "audience": "https://storage.azure.com",
                                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('User Identity'))]",
                                    "type": "ManagedServiceIdentity"
                                },
                                "headers": {
                                    "x-ms-version": "2019-07-07"
                                },
                                "method": "GET",
                                "uri": "https://@{parameters('account')}.dfs.core.windows.net/?resource=account"
                            }
                        },
                        "get-names-only": {
                            "inputs": {
                                "from": "@body('container-list').filesystems",
                                "select": "@item().name"
                            },
                            "runAfter": {
                                "container-list": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select"
                        },
                        "success-response": {
                            "inputs": {
                                "body": "@body('get-names-only')",
                                "statusCode": 200
                            },
                            "kind": "http",
                            "runAfter": {
                                "get-names-only": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Response"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {}
            }
        },
        {
            "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('Storage Name')), variables('Storage Reader'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('User Identity'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('Storage Name'))]"
            ],
            "scope": "[concat('Microsoft.Storage/storageAccounts', '/', variables('Storage Name'))]",
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('Storage Reader'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('User Identity')), '2018-11-30').principalId]"
            }
        }
    ],
    "outputs": {
    }
}